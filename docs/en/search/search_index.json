{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is 3D Gaussians Plugin? 3D Gaussians Plugin is a importer and a renderer of training results of 3D Gaussian Splatting for Unreal Engine. Just a few clicks on the UE editor to import. Real-time rendering at about 30-100 FPS with RTX3070 (depending on the size of the data). Fully implemented in Niagara and Material, without relying on Python or CUDA Demo project is available for free.","title":"What is 3D Gaussians Plugin?"},{"location":"#what-is-3d-gaussians-plugin","text":"3D Gaussians Plugin is a importer and a renderer of training results of 3D Gaussian Splatting for Unreal Engine. Just a few clicks on the UE editor to import. Real-time rendering at about 30-100 FPS with RTX3070 (depending on the size of the data). Fully implemented in Niagara and Material, without relying on Python or CUDA Demo project is available for free.","title":"What is 3D Gaussians Plugin?"},{"location":"changelog/","text":"Changelog v1.8 (Nov. 16, 2023) Added an option to control the size of the gaussians in the Niagara System. See details . .ply files output by Super Splat v0.10.3 are now supported. v1.7 (Oct. 26, 2023) Added a function to merge multiple models and export them to a single .ply file, with cropping etc. applied. See details . v1.6 (Oct. 21, 2023) Platforms Added experimental support for Ubuntu 22.04 Desktop x64 as a development platform Added experimental support for Linux x64 and Android as target build platforms Niagara Emitter now functions correctly when \"Local Space\" is turned on. If you want to move 3D Gaussians Splatting actors at runtime using Sequencer etc., please turn on \"Local Space\". See details . Now you can specify the Niagara System to be used. In the details tab of the BP, specify \"Advanced > Niagara Override\". Added examples using Wind Force and Curl Noise. See details \u3002 v1.5 (Oct. 11, 2023) VR Fixed a bug that caused incorrect rendering when VR HMD roll is not zero (UE5.2 and above). In UE5.1, rendering will not be correct when you tilt head to the left or right. Please use UE5.2 or above. Removed the option for VR (\"Advanced > VR\" in BP). This setting is no longer required. It just works for both VR and non-VR. Added support for Spherical Harmonics Degrees 1-3 in VR. Improved performance in VR. UEFN Fixed a bug that prevented the use in UEFN. Please migrate \"NS_3D_Gaussians_sh0_UEFN\" to UEFN. v1.4 (Oct. 7, 2023) Added experimental support for VR. Turn on \"Advanced > VR\" in details tab of your BP. VR mode supports only Spherical Harmonics Degree 0. We plan to eventually support Degree 1 to 3 as well. Added option to tweak sprite size in BP's details tab. Increasing sprite size improves rendering quality, but also increases rendering load. v1.3 (Oct. 6, 2023) Added experimental support for lighting. Lit/Translucent material is now supported, but problems occurs under certain conditions. See the details . Lumen is not supported. You can receive the light from Global Illumination, but the brightness may be unstable over time. Also, it cannot emit GI light. Shadows are not supported for both receive and cast. You can now specify the croppping range by combining multiple volumes. Added a fcuntion to hide data in specified ranges. Similar to croppping, it can be specified by combining multiple volumes. Fixed a bug that caused the editor would crash during import if the folder structure was under certain conditions. Fixed a bug that caused the incorrect sprite size when the FOV is changed from 90 degrees. v1.2 (Sep. 24, 2023) Added supports for UE 5.1 and 5.2. Added options to treat colors as sRGB or linear, which can be set from the Details tab in BP. Added conversion guide from the unofficial implementation taichi_3d_gaussian_splatting (Apache-2.0) Fixed a bug that caused incorrect rendering when the scale of the actor is not 1. Fixed a bug that caused actor rotations not to be included in color calculations for Spherical Harmonics Degree 1 and above. v1.1 (Sep. 22, 2023) Added functions to crop and tweak color, which can be set from the Details tab of the BP. Revamped assets for easier migration to UEFN . Due to this, direct hard references to some assets in \"Engine > Plugins > 3D Gaussians Content > Niagara\" are no longer be compatible with v1.0. Fixed a bug that could cause some gaussians not to be displayed. v1.0 (Sep. 19, 2023) First release.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v18-nov-16-2023","text":"Added an option to control the size of the gaussians in the Niagara System. See details . .ply files output by Super Splat v0.10.3 are now supported.","title":"v1.8 (Nov. 16, 2023)"},{"location":"changelog/#v17-oct-26-2023","text":"Added a function to merge multiple models and export them to a single .ply file, with cropping etc. applied. See details .","title":"v1.7 (Oct. 26, 2023)"},{"location":"changelog/#v16-oct-21-2023","text":"Platforms Added experimental support for Ubuntu 22.04 Desktop x64 as a development platform Added experimental support for Linux x64 and Android as target build platforms Niagara Emitter now functions correctly when \"Local Space\" is turned on. If you want to move 3D Gaussians Splatting actors at runtime using Sequencer etc., please turn on \"Local Space\". See details . Now you can specify the Niagara System to be used. In the details tab of the BP, specify \"Advanced > Niagara Override\". Added examples using Wind Force and Curl Noise. See details \u3002","title":"v1.6 (Oct. 21, 2023)"},{"location":"changelog/#v15-oct-11-2023","text":"VR Fixed a bug that caused incorrect rendering when VR HMD roll is not zero (UE5.2 and above). In UE5.1, rendering will not be correct when you tilt head to the left or right. Please use UE5.2 or above. Removed the option for VR (\"Advanced > VR\" in BP). This setting is no longer required. It just works for both VR and non-VR. Added support for Spherical Harmonics Degrees 1-3 in VR. Improved performance in VR. UEFN Fixed a bug that prevented the use in UEFN. Please migrate \"NS_3D_Gaussians_sh0_UEFN\" to UEFN.","title":"v1.5 (Oct. 11, 2023)"},{"location":"changelog/#v14-oct-7-2023","text":"Added experimental support for VR. Turn on \"Advanced > VR\" in details tab of your BP. VR mode supports only Spherical Harmonics Degree 0. We plan to eventually support Degree 1 to 3 as well. Added option to tweak sprite size in BP's details tab. Increasing sprite size improves rendering quality, but also increases rendering load.","title":"v1.4 (Oct. 7, 2023)"},{"location":"changelog/#v13-oct-6-2023","text":"Added experimental support for lighting. Lit/Translucent material is now supported, but problems occurs under certain conditions. See the details . Lumen is not supported. You can receive the light from Global Illumination, but the brightness may be unstable over time. Also, it cannot emit GI light. Shadows are not supported for both receive and cast. You can now specify the croppping range by combining multiple volumes. Added a fcuntion to hide data in specified ranges. Similar to croppping, it can be specified by combining multiple volumes. Fixed a bug that caused the editor would crash during import if the folder structure was under certain conditions. Fixed a bug that caused the incorrect sprite size when the FOV is changed from 90 degrees.","title":"v1.3 (Oct. 6, 2023)"},{"location":"changelog/#v12-sep-24-2023","text":"Added supports for UE 5.1 and 5.2. Added options to treat colors as sRGB or linear, which can be set from the Details tab in BP. Added conversion guide from the unofficial implementation taichi_3d_gaussian_splatting (Apache-2.0) Fixed a bug that caused incorrect rendering when the scale of the actor is not 1. Fixed a bug that caused actor rotations not to be included in color calculations for Spherical Harmonics Degree 1 and above.","title":"v1.2 (Sep. 24, 2023)"},{"location":"changelog/#v11-sep-22-2023","text":"Added functions to crop and tweak color, which can be set from the Details tab of the BP. Revamped assets for easier migration to UEFN . Due to this, direct hard references to some assets in \"Engine > Plugins > 3D Gaussians Content > Niagara\" are no longer be compatible with v1.0. Fixed a bug that could cause some gaussians not to be displayed.","title":"v1.1 (Sep. 22, 2023)"},{"location":"changelog/#v10-sep-19-2023","text":"First release.","title":"v1.0 (Sep. 19, 2023)"},{"location":"demo-project-overview/","text":"Example scenes Download Packaged build in EXE format is available here System Requirements Windows 10 64bit GPU which support DirectX 12 How to use demo Demo includes \"Garden\" and \"Bicycle\" scenes using Mip-NeRF 360 data. Movement: WASD keys + Mouse Map switching: Tab key FPS display: F key Quit demo: ESC key Source The UE5 project files are available on GitHub .","title":"Example scenes"},{"location":"demo-project-overview/#example-scenes","text":"","title":"Example scenes"},{"location":"demo-project-overview/#download","text":"Packaged build in EXE format is available here","title":"Download"},{"location":"demo-project-overview/#system-requirements","text":"Windows 10 64bit GPU which support DirectX 12","title":"System Requirements"},{"location":"demo-project-overview/#how-to-use-demo","text":"Demo includes \"Garden\" and \"Bicycle\" scenes using Mip-NeRF 360 data. Movement: WASD keys + Mouse Map switching: Tab key FPS display: F key Quit demo: ESC key","title":"How to use demo"},{"location":"demo-project-overview/#source","text":"The UE5 project files are available on GitHub .","title":"Source"},{"location":"demo-vr/","text":"VR Demo Download Packaged build in EXE format is available here System Requirements Windows 10 64bit GPU which support DirectX 12 How to use demo Demo includes \"Bicycle\" scene using Mip-NeRF 360 data. Teleport: Right stick Snap turn: Left stick Quit demo: B button menu > Real life","title":"VR Demo"},{"location":"demo-vr/#vr-demo","text":"","title":"VR Demo"},{"location":"demo-vr/#download","text":"Packaged build in EXE format is available here","title":"Download"},{"location":"demo-vr/#system-requirements","text":"Windows 10 64bit GPU which support DirectX 12","title":"System Requirements"},{"location":"demo-vr/#how-to-use-demo","text":"Demo includes \"Bicycle\" scene using Mip-NeRF 360 data. Teleport: Right stick Snap turn: Left stick Quit demo: B button menu > Real life","title":"How to use demo"},{"location":"faq/","text":"FAQ How can I make packages for other platforms? We cannot guarantee that it will work, but the rendering process is implemented in the standard Niagara and Material nodes, so there is a good chance that it will work on non-Windows platforms. To create the package for platforms other than Windows, Linux, and Android, you need to add the platforms to line 22 and line 32 of \"C:\\Program Files\\Epic Games\\UE_5.3\\Engine\\Plugins\\Marketplace\\ThreeDGaussians\\ThreeDGaussians.uplugin\". How do I reduce the package size? Set the Spherical Harmonics Degree to \"Degree 0\". Delete \"sh1\" to \"sh11\" texture assets in the content browser. You will get a reference relationship warning when deleting, but force the deletion. I placed the imported BP to a level, but nothing hoppens Make sure one or more of the Enabled Blocks are set to True. Make sure that the real-time rendering of viewport is turned on. (Ctrl+R) Editor crashes when I placed the imported BP to a level Most likely there is not enough memory on the GPU. Please try the following Enable only one or a few of Enabled Blocks Place BP on an empty level Rendering result is incorrect When Split by Morton Order , check while Play In Editor. The rendering order is sorted only during Play. When Split by the distance , the blocks are correctly rendered only when camera is placed in the block nearest to the origin. Rendering results do not match the official viewer Since our implementation is fundamentally different from the official implementation of the viewer, rendering results do not always match. One way to increase the rendering accuracy is to increase \"Sprite Size\" in Details tab of the BP. This will increase the size of the sprite on which gaussians are rendered and ensure that the edges of the gaussians are rendered correctly. Official Implementation of 3D Gaussian Splatting is not available for commercial use, how about this plugin? This plugin is implemented from scratch using Niagara and Material's node-based programming without any source code from the official implementation. (It does not even contain CUDA or HLSL source code). Therefore, this plugin itself is available for commercial use just like any other product in the Unreal Engine Marketplace. However, the user is responsible for the origin of the data created by the user. Data created in a manner forbidden for commercial use cannot be used for commercial purposes. There is an Apache-2.0-licensed unofficial implementation . See Convert from unofficial implementation . Is 3D Gaussian Splatting a family of photogrammetry? No, the underlying mechanisms are very different. Is 3D Gaussian Splatting a family of NeRF? No, the underlying mechanisms are very different. Is 3D Gaussian Splatting a family of Differentiable Rendering? Yes.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#how-can-i-make-packages-for-other-platforms","text":"We cannot guarantee that it will work, but the rendering process is implemented in the standard Niagara and Material nodes, so there is a good chance that it will work on non-Windows platforms. To create the package for platforms other than Windows, Linux, and Android, you need to add the platforms to line 22 and line 32 of \"C:\\Program Files\\Epic Games\\UE_5.3\\Engine\\Plugins\\Marketplace\\ThreeDGaussians\\ThreeDGaussians.uplugin\".","title":"How can I make packages for other platforms?"},{"location":"faq/#how-do-i-reduce-the-package-size","text":"Set the Spherical Harmonics Degree to \"Degree 0\". Delete \"sh1\" to \"sh11\" texture assets in the content browser. You will get a reference relationship warning when deleting, but force the deletion.","title":"How do I reduce the package size?"},{"location":"faq/#i-placed-the-imported-bp-to-a-level-but-nothing-hoppens","text":"Make sure one or more of the Enabled Blocks are set to True. Make sure that the real-time rendering of viewport is turned on. (Ctrl+R)","title":"I placed the imported BP to a level, but nothing hoppens"},{"location":"faq/#editor-crashes-when-i-placed-the-imported-bp-to-a-level","text":"Most likely there is not enough memory on the GPU. Please try the following Enable only one or a few of Enabled Blocks Place BP on an empty level","title":"Editor crashes when I placed the imported BP to a level"},{"location":"faq/#rendering-result-is-incorrect","text":"When Split by Morton Order , check while Play In Editor. The rendering order is sorted only during Play. When Split by the distance , the blocks are correctly rendered only when camera is placed in the block nearest to the origin.","title":"Rendering result is incorrect"},{"location":"faq/#rendering-results-do-not-match-the-official-viewer","text":"Since our implementation is fundamentally different from the official implementation of the viewer, rendering results do not always match. One way to increase the rendering accuracy is to increase \"Sprite Size\" in Details tab of the BP. This will increase the size of the sprite on which gaussians are rendered and ensure that the edges of the gaussians are rendered correctly.","title":"Rendering results do not match the official viewer"},{"location":"faq/#official-implementation-of-3d-gaussian-splatting-is-not-available-for-commercial-use-how-about-this-plugin","text":"This plugin is implemented from scratch using Niagara and Material's node-based programming without any source code from the official implementation. (It does not even contain CUDA or HLSL source code). Therefore, this plugin itself is available for commercial use just like any other product in the Unreal Engine Marketplace. However, the user is responsible for the origin of the data created by the user. Data created in a manner forbidden for commercial use cannot be used for commercial purposes. There is an Apache-2.0-licensed unofficial implementation . See Convert from unofficial implementation .","title":"Official Implementation of 3D Gaussian Splatting is not available for commercial use, how about this plugin?"},{"location":"faq/#is-3d-gaussian-splatting-a-family-of-photogrammetry","text":"No, the underlying mechanisms are very different.","title":"Is 3D Gaussian Splatting a family of photogrammetry?"},{"location":"faq/#is-3d-gaussian-splatting-a-family-of-nerf","text":"No, the underlying mechanisms are very different.","title":"Is 3D Gaussian Splatting a family of NeRF?"},{"location":"faq/#is-3d-gaussian-splatting-a-family-of-differentiable-rendering","text":"Yes.","title":"Is 3D Gaussian Splatting a family of Differentiable Rendering?"},{"location":"how-to-export/","text":"Merge and export You can merge multiple models and exported them to a single .ply file with cropping, etc. applied. This is useful for Reduce file size by deleting unnecessary parts Create a scene that combines multiple models Select \"BP_3D_Gaussians_ModelName\" placed in the level and specify the export destination in \"Export\" on the details tab. Export Directory : Specify the destination directory to export Export File Name : Specify the .ply file name to export Press the button below to execute the export of the .ply file Export All : Exports all 3D Gaussians actors on the level into one merged .ply file Export This : Exports this 3D Gaussians actor to a .ply file In both of the above cases, the export will be executed with the following applied: Actor Transform Enabled Block Crop Volume, Kill Volume","title":"Merge and export"},{"location":"how-to-export/#merge-and-export","text":"You can merge multiple models and exported them to a single .ply file with cropping, etc. applied. This is useful for Reduce file size by deleting unnecessary parts Create a scene that combines multiple models Select \"BP_3D_Gaussians_ModelName\" placed in the level and specify the export destination in \"Export\" on the details tab. Export Directory : Specify the destination directory to export Export File Name : Specify the .ply file name to export Press the button below to execute the export of the .ply file Export All : Exports all 3D Gaussians actors on the level into one merged .ply file Export This : Exports this 3D Gaussians actor to a .ply file In both of the above cases, the export will be executed with the following applied: Actor Transform Enabled Block Crop Volume, Kill Volume","title":"Merge and export"},{"location":"how-to-import/","text":"Import and place to level Import Select Window > Import 3D Gaussians from the menu at the top of the UE editor In the dialog window, select point_cloud.ply , the result of 3D Gaussian Splatting training The path must contain alphanumeric characters only You cannot import from a path that contains multibyte characters such as Japanese. The path must contain only alphanumeric characters. Place to level Drag and drop \"Content > ThreeDGaussians > ModelName > BP_3D_Gaussians_ ModelName \" onto the level in the content browser. Also, if necessary, set the following items under \"Default\" in the Details tab. Enabled Blocks : Select which blocks of imported data will be displayed. Spherical Harmonics Degree : Select the color rendering method. \"Degree 0\" disables the color change depending on the angle of view (no reflections, etc.). \"Degrees 1-3\" enable the color change with viewing angle. A higher Degree makes the rendering more accurate, but increases the rendering load. Albedo Tint : Correct color. The color specified here will be multiplied by the original color. Min translucent sort priority : Sets the priority for rendering 3D Gaussian Splatting data. In this plug-in, 3D Gaussian Splatting data is drawn as a translucent mesh. This value is applied to the Translucency Sort Priority of the furthest block, and a value of (this value + number of valid blocks - 1) is applied to the nearest block. Crop Volumes : Add elements and specify the cropping range. Gaussians outside the range specified here will not be rendered. Kill Volumes : Add elements and specify hidden ranges. Gaussians inside the range specified here will not be rendered. Sprite Size : Adjust the size of the sprite that draws the Gaussian distribution. Increasing this value allows accurate rendering to the edges of the Gaussian distribution. However, this increases the number of overlapping sprites and increases the drawing load. Advanced > VR : Turn on to support VR. When turned on, the rendering load will increase slightly. (UPDATE v1.5: This setting is no longer needed. It jsut works for both VR and non-VR) Advanced > Lit : Turn on to support lighting. When turned on, Lit/Translucent material is used. When turned off, Unlit/Translucent material is used. Migrate cropping range from v1.2 or earlier \"Crop Volume\", which was used in v1.2 and earlier, has been deprecated. It may be removed in the future. Please disable \"Crop\" under DEPRECATED and use the new \"Crop Volumes\". VR mode supports only Spherical Harmonics Degree 0 Currently, even if you select Degree 1 to 3, it will be rendered as Degree 0 when you turn on VR. We plan to eventually support Degree 1 to 3 as well. (UPDATE v1.5: Now Degree 1 to 3 are supported) Known issues Known issues with VR In UE5.1, if the HMD Roll is not 0 (head tilted to the left or right), rendering will not be correct. Please use UE5.2 or higher. Known issue with Lit mode If the point light is close to the surface of the 3D Gaussian Splatting data, the brightness may be uneven. Below, there is a moment when the light on the right suddenly becomes brighter. The brightness of spot lights and rect lights is not evaluated correctly, making them darker than directional lights and point lights. All three lights below have an intensity of 15 cd, but you can see that the spot light in the front and the rect light on the right are darker than the spotlight on the left.","title":"Import and place to level"},{"location":"how-to-import/#import-and-place-to-level","text":"","title":"Import and place to level"},{"location":"how-to-import/#import","text":"Select Window > Import 3D Gaussians from the menu at the top of the UE editor In the dialog window, select point_cloud.ply , the result of 3D Gaussian Splatting training The path must contain alphanumeric characters only You cannot import from a path that contains multibyte characters such as Japanese. The path must contain only alphanumeric characters.","title":"Import"},{"location":"how-to-import/#place-to-level","text":"Drag and drop \"Content > ThreeDGaussians > ModelName > BP_3D_Gaussians_ ModelName \" onto the level in the content browser. Also, if necessary, set the following items under \"Default\" in the Details tab. Enabled Blocks : Select which blocks of imported data will be displayed. Spherical Harmonics Degree : Select the color rendering method. \"Degree 0\" disables the color change depending on the angle of view (no reflections, etc.). \"Degrees 1-3\" enable the color change with viewing angle. A higher Degree makes the rendering more accurate, but increases the rendering load. Albedo Tint : Correct color. The color specified here will be multiplied by the original color. Min translucent sort priority : Sets the priority for rendering 3D Gaussian Splatting data. In this plug-in, 3D Gaussian Splatting data is drawn as a translucent mesh. This value is applied to the Translucency Sort Priority of the furthest block, and a value of (this value + number of valid blocks - 1) is applied to the nearest block. Crop Volumes : Add elements and specify the cropping range. Gaussians outside the range specified here will not be rendered. Kill Volumes : Add elements and specify hidden ranges. Gaussians inside the range specified here will not be rendered. Sprite Size : Adjust the size of the sprite that draws the Gaussian distribution. Increasing this value allows accurate rendering to the edges of the Gaussian distribution. However, this increases the number of overlapping sprites and increases the drawing load. Advanced > VR : Turn on to support VR. When turned on, the rendering load will increase slightly. (UPDATE v1.5: This setting is no longer needed. It jsut works for both VR and non-VR) Advanced > Lit : Turn on to support lighting. When turned on, Lit/Translucent material is used. When turned off, Unlit/Translucent material is used. Migrate cropping range from v1.2 or earlier \"Crop Volume\", which was used in v1.2 and earlier, has been deprecated. It may be removed in the future. Please disable \"Crop\" under DEPRECATED and use the new \"Crop Volumes\". VR mode supports only Spherical Harmonics Degree 0 Currently, even if you select Degree 1 to 3, it will be rendered as Degree 0 when you turn on VR. We plan to eventually support Degree 1 to 3 as well. (UPDATE v1.5: Now Degree 1 to 3 are supported)","title":"Place to level"},{"location":"how-to-import/#known-issues","text":"Known issues with VR In UE5.1, if the HMD Roll is not 0 (head tilted to the left or right), rendering will not be correct. Please use UE5.2 or higher. Known issue with Lit mode If the point light is close to the surface of the 3D Gaussian Splatting data, the brightness may be uneven. Below, there is a moment when the light on the right suddenly becomes brighter. The brightness of spot lights and rect lights is not evaluated correctly, making them darker than directional lights and point lights. All three lights below have an intensity of 15 cd, but you can see that the spot light in the front and the rect light on the right are darker than the spotlight on the left.","title":"Known issues"},{"location":"how-to-migrate/","text":"Migrate to BP projets The C++ module included in this plug-in is only used for the import process. Therefore, imported data can be migrated to a BP project that does not contain C++. Right-click \"BP_3D_Gaussians_ ModelName \" under \"Content > ThreeDGaussians > ModelName \" in the content browser Select \"Asset Actions > Migrate...\" and click \"OK\" in the dialog box Select the content folder of the BP project to be migrated","title":"Migrate to BP projets"},{"location":"how-to-migrate/#migrate-to-bp-projets","text":"The C++ module included in this plug-in is only used for the import process. Therefore, imported data can be migrated to a BP project that does not contain C++. Right-click \"BP_3D_Gaussians_ ModelName \" under \"Content > ThreeDGaussians > ModelName \" in the content browser Select \"Asset Actions > Migrate...\" and click \"OK\" in the dialog box Select the content folder of the BP project to be migrated","title":"Migrate to BP projets"},{"location":"how-to-niagara/","text":"Customize rendering Render in local space Open \"Engine > Plugins > 3D Gaussians Content > Niagara > NE_3D_Gaussians\" and enable \"Local Space\" of Emitter Properties to process Niagara particle in local space. If you want to move 3D Gaussians Splatting actors at runtime using Sequencer etc., please turn on \"Local Space\". Use your own Niagara By specifying any Niagara System to the variable \"Default > Advanced > Niagara Override\" of \"BP_3D_Gaussians_ModelName\", you can use that Niagara for the rendering. The main way to use it is: Copy the Niagara System from \"Engine > Plugins > 3D Gaussians Content > Niagara\" Add some modules to it Specify it tp the \"Niagara Override\" Example: Move by Wind Force By specifying \"Engine > Plugins > 3D Gaussians Content > Example > NS_3D_Gaussians_sh0_MoveByWindForce\" to \"Niagara Override\", you can get the effect above. Example: Rotate by Curl Noise By specifying \"Engine > Plugins > 3D Gaussians Content > Example > NS_3D_Gaussians_sh0_RotateByCurlNoise\" to \"Niagara Override\", you can get the effect above. Example: Scale by Curl Noise By specifying \"Engine > Plugins > 3D Gaussians Content > Example > NS_3D_Gaussians_sh0_ScaleByCurlNoise\" to \"Niagara Override\", you can get the effect above.","title":"Customize rendering"},{"location":"how-to-niagara/#customize-rendering","text":"","title":"Customize rendering"},{"location":"how-to-niagara/#render-in-local-space","text":"Open \"Engine > Plugins > 3D Gaussians Content > Niagara > NE_3D_Gaussians\" and enable \"Local Space\" of Emitter Properties to process Niagara particle in local space. If you want to move 3D Gaussians Splatting actors at runtime using Sequencer etc., please turn on \"Local Space\".","title":"Render in local space"},{"location":"how-to-niagara/#use-your-own-niagara","text":"By specifying any Niagara System to the variable \"Default > Advanced > Niagara Override\" of \"BP_3D_Gaussians_ModelName\", you can use that Niagara for the rendering. The main way to use it is: Copy the Niagara System from \"Engine > Plugins > 3D Gaussians Content > Niagara\" Add some modules to it Specify it tp the \"Niagara Override\"","title":"Use your own Niagara"},{"location":"how-to-niagara/#example-move-by-wind-force","text":"By specifying \"Engine > Plugins > 3D Gaussians Content > Example > NS_3D_Gaussians_sh0_MoveByWindForce\" to \"Niagara Override\", you can get the effect above.","title":"Example: Move by Wind Force"},{"location":"how-to-niagara/#example-rotate-by-curl-noise","text":"By specifying \"Engine > Plugins > 3D Gaussians Content > Example > NS_3D_Gaussians_sh0_RotateByCurlNoise\" to \"Niagara Override\", you can get the effect above.","title":"Example: Rotate by Curl Noise"},{"location":"how-to-niagara/#example-scale-by-curl-noise","text":"By specifying \"Engine > Plugins > 3D Gaussians Content > Example > NS_3D_Gaussians_sh0_ScaleByCurlNoise\" to \"Niagara Override\", you can get the effect above.","title":"Example: Scale by Curl Noise"},{"location":"how-to-split/","text":"Adjust block split rule This plugin renders 3D Gaussian Splatting data using Niagara particles. Because there is a limit to the number of particles in a Niagara system, this plugin imports 3D Gaussian Splatting data into multiple blocks and assign a Niagara system for each block. This allows for large data to be rendered, but it does cause a problem: if you look carefully, you can see the seams between the blocks. For this reason, the block split rules can be edited according to the intended use. The data is re-split by changing the rules in the following procedure and importing the data again. Specify block size In this plugin, the 3D Gaussian Splatting data after splitting is stored in square textures. The maximum value of the texture's sides can be set by specifying the console variable like ThreeDGaussians.MaxTextureWidth 1264 . The square of this value is the maximum number of particles each block can hold. The default value is 1024. The max number of particles in Niagara The maximum number of particles Niagara can handle is 2,000,000. (as of UE5.1). However, although the detailed conditions are unknown, sometimes a warning message appears with a smaller value (e.g., 1,597,823 particles). Therefore, the default split size is set to 1024*1024=1,048,576. Select split mode Split by Morton Order This method is enabled by default. Split data into two blocks by the position of Z-axis \u2192 For each split block, split data into two blocks by the position of Y-axis. \u2192 For each split block, split data into two blocks by the position of X-axis. \u2192 For each split block, split data into two blocks by the position of Z-axis. \u2192 ... (Loop until the size of the block becomes smaller then the max size specified above.) This method has the advantage that it is easy to sort the depth of each block viewed from the camera. On the other hand, it has the disadvantage that it is difficult to predict where the seams between the blocks will appear. Runtime depth-sort for each block A binary tree is used to the depth-sort of each block. This binary tree is constructed during the splitting and stored in TArray<FThreeDGaussiansTree> tree . This tree is an element of FThreeDGaussians which is passed from C++ importer to a subclass of BP_3D_Gaussians_Base which is used at runtime. Depth-sort by the binary tree is implemented in the Tick event of BP_3D_Gaussians_Base . Split by the distance Make a block from the first N data closest to the origin \u2192 Make a block from the next N data closest to the origin \u2192 ... (Loop until all data are grouped) This method has the advantage that seams between the blocks do not appear near the origin. However, this method has the disadvantage that although it can draw correctly when viewed from the block closest to the origin, it cannot draw correctly when viewed from the block outside of it. (This is because the drawing order of translucency can only be specified on a block-by-block basis.) Therefore, use this method for the scenes where the user moves only within the block closest to the origin. This method can be enabled by specifying the following two in the console variable: ThreeDGaussians.DoSplitBy3dMortonOrder 0 ThreeDGaussians.DoSplitByDistance 1 Tips Keep data as small as possible You can reduce the number of splits by keeping the data small in the first place. You can reduce the data size in exchange for image quality by specifying like --densification_interval 500 in the options of `train.py`` of 3D Gaussian Splatting. Note that reducing the data size also improves the FPS.","title":"Adjust block split rule"},{"location":"how-to-split/#adjust-block-split-rule","text":"This plugin renders 3D Gaussian Splatting data using Niagara particles. Because there is a limit to the number of particles in a Niagara system, this plugin imports 3D Gaussian Splatting data into multiple blocks and assign a Niagara system for each block. This allows for large data to be rendered, but it does cause a problem: if you look carefully, you can see the seams between the blocks. For this reason, the block split rules can be edited according to the intended use. The data is re-split by changing the rules in the following procedure and importing the data again.","title":"Adjust block split rule"},{"location":"how-to-split/#specify-block-size","text":"In this plugin, the 3D Gaussian Splatting data after splitting is stored in square textures. The maximum value of the texture's sides can be set by specifying the console variable like ThreeDGaussians.MaxTextureWidth 1264 . The square of this value is the maximum number of particles each block can hold. The default value is 1024. The max number of particles in Niagara The maximum number of particles Niagara can handle is 2,000,000. (as of UE5.1). However, although the detailed conditions are unknown, sometimes a warning message appears with a smaller value (e.g., 1,597,823 particles). Therefore, the default split size is set to 1024*1024=1,048,576.","title":"Specify block size"},{"location":"how-to-split/#select-split-mode","text":"","title":"Select split mode"},{"location":"how-to-split/#split-by-morton-order","text":"This method is enabled by default. Split data into two blocks by the position of Z-axis \u2192 For each split block, split data into two blocks by the position of Y-axis. \u2192 For each split block, split data into two blocks by the position of X-axis. \u2192 For each split block, split data into two blocks by the position of Z-axis. \u2192 ... (Loop until the size of the block becomes smaller then the max size specified above.) This method has the advantage that it is easy to sort the depth of each block viewed from the camera. On the other hand, it has the disadvantage that it is difficult to predict where the seams between the blocks will appear. Runtime depth-sort for each block A binary tree is used to the depth-sort of each block. This binary tree is constructed during the splitting and stored in TArray<FThreeDGaussiansTree> tree . This tree is an element of FThreeDGaussians which is passed from C++ importer to a subclass of BP_3D_Gaussians_Base which is used at runtime. Depth-sort by the binary tree is implemented in the Tick event of BP_3D_Gaussians_Base .","title":"Split by Morton Order"},{"location":"how-to-split/#split-by-the-distance","text":"Make a block from the first N data closest to the origin \u2192 Make a block from the next N data closest to the origin \u2192 ... (Loop until all data are grouped) This method has the advantage that seams between the blocks do not appear near the origin. However, this method has the disadvantage that although it can draw correctly when viewed from the block closest to the origin, it cannot draw correctly when viewed from the block outside of it. (This is because the drawing order of translucency can only be specified on a block-by-block basis.) Therefore, use this method for the scenes where the user moves only within the block closest to the origin. This method can be enabled by specifying the following two in the console variable: ThreeDGaussians.DoSplitBy3dMortonOrder 0 ThreeDGaussians.DoSplitByDistance 1","title":"Split by the distance"},{"location":"how-to-split/#tips","text":"Keep data as small as possible You can reduce the number of splits by keeping the data small in the first place. You can reduce the data size in exchange for image quality by specifying like --densification_interval 500 in the options of `train.py`` of 3D Gaussian Splatting. Note that reducing the data size also improves the FPS.","title":"Tips"},{"location":"how-to-uefn/","text":"Migration to UEFN (Experimental) Since BP is not available in UEFN, we have the following restrictions Manual setup of texture data in Niagara System is required. Control of the rendering order between divided blocks is not supported. Currently, only Fortnite for Windows PC has been tested. Operation in the UE project Right-click \"Engine > Plugins > 3D Gaussians Content > Niagara > NS_3D_Gaussians_sh0_UEFN\" in the content browser. Select \"Asset Actions > Migrate...\", check \"ThreeDGaussians\" in the dialog box, and click OK. Select the contents folder of the destination UEFN project to migrate. Import a model to a UE project as described in \" Import \" section, and migrate \"position\", \"rotation\", \"scaleAndOpacity\" and \"sh_0\" in \"Content > ThreeDGaussians > Model Name > Block Number\" to the destination UEFN project. Operation in the UEFN project Open \"Content > Niagara > NS_3D_Gaussians_sh0_UEFN\" in the content browser In the User Parameters tab, set \"position\", \"rotation\", \"scaleAndOpacity\" and \"sh_0\" in \"Content > ThreeDGaussians > Model Name > Block Number\" to \"texutre_position\", \"texutre_rotation\", \"texutre_scaleAndOpacity\" and \"texutre_sh_0. Also, set the width of the texture to \"texutre_width\". Select the \"NS_3D_Gaussians_sh0_UEFN\" system's properties and click \"Fix issues\". Drag and drop \"Engine > Plugins > 3D Gaussians Content > Niagara > NS_3D_Gaussians_sh0_UEFN\" from the content browser onto the level. In the Scalability settings, set \"Epic\" for Effects. How to crop in UEFN You can specify crop translation, rotation, and extent in UEFN. The problem is it is really difficult to find proper values for these variables in UEFN. It is recommended to find these vaules in UE and copy-paste them into UEFN.","title":"Migration to UEFN (Experimental)"},{"location":"how-to-uefn/#migration-to-uefn-experimental","text":"Since BP is not available in UEFN, we have the following restrictions Manual setup of texture data in Niagara System is required. Control of the rendering order between divided blocks is not supported. Currently, only Fortnite for Windows PC has been tested.","title":"Migration to UEFN (Experimental)"},{"location":"how-to-uefn/#operation-in-the-ue-project","text":"Right-click \"Engine > Plugins > 3D Gaussians Content > Niagara > NS_3D_Gaussians_sh0_UEFN\" in the content browser. Select \"Asset Actions > Migrate...\", check \"ThreeDGaussians\" in the dialog box, and click OK. Select the contents folder of the destination UEFN project to migrate. Import a model to a UE project as described in \" Import \" section, and migrate \"position\", \"rotation\", \"scaleAndOpacity\" and \"sh_0\" in \"Content > ThreeDGaussians > Model Name > Block Number\" to the destination UEFN project.","title":"Operation in the UE project"},{"location":"how-to-uefn/#operation-in-the-uefn-project","text":"Open \"Content > Niagara > NS_3D_Gaussians_sh0_UEFN\" in the content browser In the User Parameters tab, set \"position\", \"rotation\", \"scaleAndOpacity\" and \"sh_0\" in \"Content > ThreeDGaussians > Model Name > Block Number\" to \"texutre_position\", \"texutre_rotation\", \"texutre_scaleAndOpacity\" and \"texutre_sh_0. Also, set the width of the texture to \"texutre_width\". Select the \"NS_3D_Gaussians_sh0_UEFN\" system's properties and click \"Fix issues\". Drag and drop \"Engine > Plugins > 3D Gaussians Content > Niagara > NS_3D_Gaussians_sh0_UEFN\" from the content browser onto the level. In the Scalability settings, set \"Epic\" for Effects. How to crop in UEFN You can specify crop translation, rotation, and extent in UEFN. The problem is it is really difficult to find proper values for these variables in UEFN. It is recommended to find these vaules in UE and copy-paste them into UEFN.","title":"Operation in the UEFN project"},{"location":"how-to-unofficial/","text":"Convert from unofficial implementation (Experimental) The official implementation of 3D Gaussian Splatting is not available for commercial use, but there is unofficial implementations released under licenses that allow commercial use. By converting the format of models generated by the unofficial implementation, they can be used in this plug-in. Convert from taichi_3d_gaussian_splatting Open conversion script . Press the Execute button, then press the Select File button to upload the parquet file. Conversion will begin automatically and the ply file will be downloaded when completed. Import a model to a UE project as described in \" Import \" section Enable \"Default > Advanced > Apply Sigmoid to Color\" in the Details panel of the model BP. Convert in local To run the conversion script in your local machine, follow the steps below. This is useful when the file size is large. Install the following package in your Python environment pip install pandas, numpy, plyfile Click \"Show code\" in the code block of the conversion script, copy lines 15-48 to a local text file and name it convert.py Add a line to the top of the convert.py and save path = '/path/to/your/file.parquet' Execute convert.py python convert.py","title":"Convert from unofficial implementation (Experimental)"},{"location":"how-to-unofficial/#convert-from-unofficial-implementation-experimental","text":"The official implementation of 3D Gaussian Splatting is not available for commercial use, but there is unofficial implementations released under licenses that allow commercial use. By converting the format of models generated by the unofficial implementation, they can be used in this plug-in.","title":"Convert from unofficial implementation (Experimental)"},{"location":"how-to-unofficial/#convert-from-taichi_3d_gaussian_splatting","text":"Open conversion script . Press the Execute button, then press the Select File button to upload the parquet file. Conversion will begin automatically and the ply file will be downloaded when completed. Import a model to a UE project as described in \" Import \" section Enable \"Default > Advanced > Apply Sigmoid to Color\" in the Details panel of the model BP. Convert in local To run the conversion script in your local machine, follow the steps below. This is useful when the file size is large. Install the following package in your Python environment pip install pandas, numpy, plyfile Click \"Show code\" in the code block of the conversion script, copy lines 15-48 to a local text file and name it convert.py Add a line to the top of the convert.py and save path = '/path/to/your/file.parquet' Execute convert.py python convert.py","title":"Convert from taichi_3d_gaussian_splatting"},{"location":"install/","text":"Installation Purchase at UE Marketplace and install it. Create an Unreal Engine project. Open the project, open Edit > Plugins on the editor menu, enable 3D Gaussians , and restart the project. Install to Linux You need to download the plugin by using the Epic Games Launcher on Windows . Copy the plugin at <YOUR ENGINE INSTALATION PATH>\\Engine\\Plugins\\Marketplace\\ThreeDGaussians on Windows to <YOUR PROJECT PATH>\\Plugins\\ThreeDGaussians on Linux.","title":"Installation"},{"location":"install/#installation","text":"Purchase at UE Marketplace and install it. Create an Unreal Engine project. Open the project, open Edit > Plugins on the editor menu, enable 3D Gaussians , and restart the project. Install to Linux You need to download the plugin by using the Epic Games Launcher on Windows . Copy the plugin at <YOUR ENGINE INSTALATION PATH>\\Engine\\Plugins\\Marketplace\\ThreeDGaussians on Windows to <YOUR PROJECT PATH>\\Plugins\\ThreeDGaussians on Linux.","title":"Installation"},{"location":"modules/","text":"Modules This plugin consists of the following 2 modules. Module Description ThreeDGaussiansImporter an editor-only module for importing 3D Gaussian Splatting data, which implements the import process when a button is pressed in the UE editor. ThreeDGaussians a runtime module which defines structures for passing imported 3D Gaussian Splatting data from C++ to BP","title":"Modules"},{"location":"modules/#modules","text":"This plugin consists of the following 2 modules. Module Description ThreeDGaussiansImporter an editor-only module for importing 3D Gaussian Splatting data, which implements the import process when a button is pressed in the UE editor. ThreeDGaussians a runtime module which defines structures for passing imported 3D Gaussian Splatting data from C++ to BP","title":"Modules"},{"location":"system-requirement/","text":"System Requirements Supported Unreal Engine version: 5.1 5.2 5.3 Supported Platforms Platform Development Target Build Windows 64bit \u2705 \u2705 Ubuntu 22.04 Desktop 64bit \u2705(Experimental) \u2705(Experimental) Android \u2705(Experimental) iOS Mac Windows is required to download the plugin You need to download the plugin by using the Epic Games Launcher on Windows . Tested Ubuntu environment The developer tested only in the following environment: OS: Ubuntu 22.04 Desktop 64bit CPU: Intel i3-8350K GPU: NVIDIA GeForce GTX 1080 Ti Driver: 535.113.01 Unreal Engine: 5.1.1, 5.2.1, 5.3.1 .NET SDK: 6.0.123 We cannot guarantee whether it will work properly in other environments, so the Ubuntu support status is \"Experimental\". Tested Android device The developer tested only with the following device: Xiaomi Redmi Note 9S We cannot guarantee whether it will work properly in other environments, so the Android support status is \"Experimental\". Supported GPU GPUs that support DirectX 12","title":"System Requirements"},{"location":"system-requirement/#system-requirements","text":"","title":"System Requirements"},{"location":"system-requirement/#supported-unreal-engine-version","text":"5.1 5.2 5.3","title":"Supported Unreal Engine version:"},{"location":"system-requirement/#supported-platforms","text":"Platform Development Target Build Windows 64bit \u2705 \u2705 Ubuntu 22.04 Desktop 64bit \u2705(Experimental) \u2705(Experimental) Android \u2705(Experimental) iOS Mac Windows is required to download the plugin You need to download the plugin by using the Epic Games Launcher on Windows . Tested Ubuntu environment The developer tested only in the following environment: OS: Ubuntu 22.04 Desktop 64bit CPU: Intel i3-8350K GPU: NVIDIA GeForce GTX 1080 Ti Driver: 535.113.01 Unreal Engine: 5.1.1, 5.2.1, 5.3.1 .NET SDK: 6.0.123 We cannot guarantee whether it will work properly in other environments, so the Ubuntu support status is \"Experimental\". Tested Android device The developer tested only with the following device: Xiaomi Redmi Note 9S We cannot guarantee whether it will work properly in other environments, so the Android support status is \"Experimental\".","title":"Supported Platforms"},{"location":"system-requirement/#supported-gpu","text":"GPUs that support DirectX 12","title":"Supported GPU"}]}